spring.application.name=LinkToolkit
server.port=${SERVER_PORT}

app.base-url=${APP_BASE_URL}
app.frontend-url=${APP_FRONTEND_URL}


# For local development with Docker Compose
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# JPA / Hibernate Settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# JWT Configuration
# Generate a strong, Base64 encoded secret: https://www.base64encode.org/
jwt.secret=${JWT_SECRET}
# 24 hours
jwt.expiration.ms=86400000

# Analytics Configuration
maxmind.geoip.database.path=classpath:GeoLite2-City.mmdb

# --- Add this to your existing Azure properties ---

# Azure Blob Storage Configuration
spring.cloud.azure.storage.blob.account-name=linktoolkitstoragenx7
spring.cloud.azure.storage.blob.account-key=6KimrKwSqB0hFGklgDIw/z9l7eLTeos2JQHX+ERowoVYU8W0xX9njnyIEajP6DzJ+mqy6Z4izNTg+AStztBspg==
spring.cloud.azure.storage.blob.endpoint=https://linktoolkitstoragenx7.blob.core.windows.net/
azure.storage.blob.container-name=qrcodes


### PostgreSQL config
##spring.datasource.url=${POSTGRES_URL}
##spring.datasource.username=${POSTGRES_USERNAME}
##spring.datasource.password=${POSTGRES_PASSWORD}
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=password
#spring.datasource.driver-class-name=org.postgresql.Driver
#
## JPA settings
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#
## Google OAuth2 Configuration
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
#spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.google.scope=email,profile
#
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
